##DSS 81724-0905 - Basic Web Scanner - xss, sql, csrf
## pip install requests beautifulsoup4 colorama
## python web_app_scanner.py -v http://example.com

import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin
import re
import argparse
from colorama import Fore, Style, init

init(autoreset=True)  # Initialize colorama

class WebAppScanner:
    def __init__(self, target_url, verbose=False):
        self.target_url = target_url
        self.visited_urls = set()
        self.vulnerabilities = []
        self.verbose = verbose

    def log(self, message, level="info"):
        if self.verbose:
            if level == "info":
                print(f"{Fore.BLUE}[INFO]{Style.RESET_ALL} {message}")
            elif level == "warning":
                print(f"{Fore.YELLOW}[WARNING]{Style.RESET_ALL} {message}")
            elif level == "error":
                print(f"{Fore.RED}[ERROR]{Style.RESET_ALL} {message}")
            elif level == "success":
                print(f"{Fore.GREEN}[SUCCESS]{Style.RESET_ALL} {message}")

    def crawl(self, url):
        if url in self.visited_urls:
            return
        self.visited_urls.add(url)
        
        self.log(f"Crawling: {url}")
        try:
            response = requests.get(url)
            soup = BeautifulSoup(response.text, 'html.parser')
            
            for link in soup.find_all('a'):
                href = link.get('href')
                if href:
                    full_url = urljoin(url, href)
                    if full_url.startswith(self.target_url):
                        self.crawl(full_url)
                        
            self.scan_xss(url, response.text)
            self.scan_sql_injection(url)
            self.scan_csrf(url, response.text)
        except requests.exceptions.RequestException as e:
            self.log(f"Error crawling {url}: {e}", "error")

    def scan_xss(self, url, content):
        self.log(f"Scanning for XSS vulnerabilities: {url}")
        xss_patterns = [
            r'<script\s*>.*?</script\s*>',
            r'on\w+\s*=.*?',
            r'javascript:.*?'
        ]
        for pattern in xss_patterns:
            if re.search(pattern, content, re.IGNORECASE):
                vuln_message = f"Potential XSS vulnerability found at {url}"
                self.vulnerabilities.append(vuln_message)
                self.log(vuln_message, "warning")
                break

    def scan_sql_injection(self, url):
        self.log(f"Scanning for SQL Injection vulnerabilities: {url}")
        payloads = ["'", "\"", "1 OR '1'='1", "1; DROP TABLE users"]
        for payload in payloads:
            test_url = f"{url}?id={payload}"
            try:
                response = requests.get(test_url)
                if "SQL syntax" in response.text or "database error" in response.text.lower():
                    vuln_message = f"Potential SQL Injection vulnerability found at {test_url}"
                    self.vulnerabilities.append(vuln_message)
                    self.log(vuln_message, "warning")
                    break
            except requests.exceptions.RequestException:
                pass

    def scan_csrf(self, url, content):
        self.log(f"Scanning for CSRF vulnerabilities: {url}")
        if 'csrf' not in content.lower() and 'token' not in content.lower():
            vuln_message = f"Potential CSRF vulnerability found at {url}"
            self.vulnerabilities.append(vuln_message)
            self.log(vuln_message, "warning")

    def run_scan(self):
        self.log(f"Starting scan on {self.target_url}", "info")
        self.crawl(self.target_url)
        self.log("Scan completed", "success")

    def generate_report(self):
        print("\n--- Vulnerability Report ---")
        if self.vulnerabilities:
            for vuln in self.vulnerabilities:
                print(f"{Fore.RED}- {vuln}{Style.RESET_ALL}")
        else:
            print(f"{Fore.GREEN}No vulnerabilities found.{Style.RESET_ALL}")
        print(f"\nTotal URLs scanned: {len(self.visited_urls)}")

def main():
    parser = argparse.ArgumentParser(description="Web Application Vulnerability Scanner")
    parser.add_argument("url", help="Target URL to scan")
    parser.add_argument("-v", "--verbose", action="store_true", help="Enable verbose output")
    args = parser.parse_args()

    scanner = WebAppScanner(args.url, verbose=args.verbose)
    scanner.run_scan()
    scanner.generate_report()

if __name__ == "__main__":
    main()